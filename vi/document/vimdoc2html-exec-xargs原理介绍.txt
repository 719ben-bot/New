C:\Program Files\Vim\vim74\doc\tags  //无后缀文件
vim还自带了一个好用的导出html格式的文档的工具。使用方法： 在任意位置新建一个目录，然后在该目录下面执行：
find /usr/share/vim/vim73/doc/ -name "*.txt" -exec 
perl /usr/share/vim/vim73/doc/vim2html.pl /usr/share/vim/vim73/doc/tags {} \;
就会在该目录下生成美观的html格式的文档。
我把这些文档导出了一下，可以点击 *这里* 下载。对于初学者，下载后应该首先读的是usr_toc.html。
{} 花括号代表前面find查找出来的文件名
=
linux find -exec 后面的{}是干什么用的 
The string `{}'
              is replaced by the current file name being processed  everywhere
              it occurs in the arguments to the command 
翻译一下大概就是说：{}会在被正在处理的符合条件的文件名替代。所以应该一次只会有一个文件，因而你用的排序看起来没有用。
=
find . -user 用户名 -exec chmod 777 {} \ 这个命令的详解 
你先要知道一点， -xxx都是参数的key
-exec 意思是在find命令内执行 后面的shell 
这个参数中有一些特殊语法，因为他是find命令自己定义的语法
其中{} 代表 find命令匹配到的文件 ， \ 代表-exec命令的结束符。
-
这里只说说查找当前文件夹文件，保留一个月备份上。用到的命令find -exec rm：
一般有2中写法：
#find ... -exec rm {} \;
#find ... | xargs rm -rf
两者都可以把find命令查找到的结果删除，
其区别简单的说是前者是把find发现的结果一次性传给exec选项，后者xargs命令会分批次的处理结果。
xargs优点：由于是批处理的，所以执行效率比较高（通过缓冲方式）
xargs缺点：有可能由于参数数量过多（成千上万），导致后面的命令执行失败
若换成 find ....-execrm {} \; 的话,
因为rm 是"逐个" item 去处理的, 则无此忧虑
rm不接受标准输入，所以不能用find / -name "tmpfile" ｜rm
-exec 必须由一个 ; 结束，而因为通常 shell 都会对 ; 进行处理，所以用 \; 防止这种情况。
{} 可能需要写做 '{}'，也是为了避免被 shell 过滤。
-
xargs 接到参数就开始处理 而不是像exec 那样土鳖 非要接受到全部
===========================================
1.使用find 的exec选项去处理匹配到的选项时，find 一次性将匹配到得参数传给EXEC 执行。但有的系统，对exec 传的参数长度有限制，这样在find 命令执行几分钟后会报溢出，错误信息通常是“参数列太长”或“参数列溢出"。
2.xargs 与find 命令合用的时候，find 把匹配到得命令传递给xargs ,xargs 每次只获取一部分文件，而不是全部。分批处理。
3. 使用EXEC 选项，会为匹配的每个文件处理分配个进程，并不是将匹配到的文件作为一个参数一次执行，这样就会触发多个进程，进而使系统性能下降，影响处理效率。
4 XARGS则只有一个进程、但xargs 处理是否分批 ，批次大小，也会受系统些可调参数影响。
===========================================
find pathname -options [-print -exec -ok]
find命令将所有匹配到的文件一起传递给exec执行
xargs
前面的输出转换为后方指令的参数输入
使用exec和xargs可以使用户对所匹配到的文件执行几乎所有的命令。
-
-exec和xargs的区别
2010-11-27 星期六 晴朗
当你在命令行执行：
$find . -name 'core' -type f -exec rm {} /;
时，find -exec 命令会对每个匹配的文件执行一个单独的rm操作（execute a separate rm for each one）, 正如你手动敲入下面命令：
rm ./bin/core
rm ./source/shopping_cart/core
rm ./backups/core
...
但是使用这种方式，如果有100个文件匹配了，那么就需要启100个进程，一个进程处理一个rm命令。
-
可以换个思路，我们将要删除文件当作参数传递给rm不就可以了吗？也就是说： 
改成：
rm ./bin/core ./source/shopping_cart/core ./backups/core
但是前提是后面的命令必须支持多参数。相有些命令，比如unzip，就不支持输入多个jar包，所以必须用-exec。
xargs，顾名思义，是对参数进行处理的命令。它的任务就是将输入行转换成下一个命令的参数列表。
上面的find -exec命令可以改写成：
find . -name 'core' -type f -print | xargs rm
其中操作系统允许的最大参数长度由如下命令得到：
forrest@ubuntu:~$ getconf ARG_MAX
2097152
这意味着xargs保证不会因为参数过多而挂掉。所以目前看来唯一需要保证的就是后面的命令支持多参数。比如前面说过的unzip，就不支持多参数,使用-exec调用unzip命令就没有问题.
===========================================
第三种方式――使用单反引号(``)作命令替换command substitution
达到的效果与xargs非常类似，但是xargs有对命令参数作超长检查，而这个不会。所以不建议在这里使用。但是使用``从上一个命令中获取输入结果是非常有用的。
forrest@ubuntu$ unzip -l `find . -name "*.jar"`
$ for i in `find . -name "*.jar"`; do unzip -l $i | grep napoli.properties; done
      404  2010-11-16 17:11   META-INF/autoconf/biz-napoli.properties.vm
      705  2010-11-26 20:21   biz/napoli.properties
===========================================
find /tmp -size +1000k -type f -print0 | xargs -r0 rm --
特点：和使用 -exec 相比速度快， -exec 是每匹配一个文件就调用一次rm命令，而GNU的xargs可以将扫描结果全部传给rm作为执行参数一次执行。
===========================================

